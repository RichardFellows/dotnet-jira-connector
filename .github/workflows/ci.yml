name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: ['8.0.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Display .NET version
      run: dotnet --version
      
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run unit tests (excluding DuckDB tests)
      run: |
        dotnet test \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --filter "FullyQualifiedName!~DuckDbService" \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage
      
    - name: Generate code coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.4
      with:
        reports: 'coverage/**/coverage.cobertura.xml'
        targetdir: 'coverage-report'
        reporttypes: 'Html;Cobertura'
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage-report/Cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: .NET Tests
        path: '**/*.trx'
        reporter: dotnet-trx
        
    - name: Build artifacts
      run: |
        dotnet publish src/JiraConnector.Console/JiraConnector.Console.csproj \
          --configuration Release \
          --output ./publish \
          --no-restore
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jira-connector-${{ github.sha }}
        path: ./publish/
        retention-days: 30

  code-quality:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run code analysis
      run: dotnet format --verify-no-changes --verbosity diagnostic
      
    - name: Security scan with .NET security analyzers
      run: |
        dotnet add src/JiraConnector/JiraConnector.csproj package Microsoft.CodeAnalysis.NetAnalyzers
        dotnet build --configuration Release --verbosity normal

  integration-test:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Install DuckDB for integration tests
      run: |
        wget https://github.com/duckdb/duckdb/releases/latest/download/libduckdb-linux-amd64.zip
        unzip libduckdb-linux-amd64.zip
        sudo cp libduckdb.so /usr/local/lib/
        sudo ldconfig
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run integration tests (including DuckDB)
      run: |
        dotnet test \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --results-directory ./test-results
      
    - name: Publish integration test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Integration Tests
        path: './test-results/*.trx'
        reporter: dotnet-trx